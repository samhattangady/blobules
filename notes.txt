13 Jun 2020
So yeah just a place for some notes. Would need to set up vimwiki here as
well to make sure the things are alright. Apart from that I think its largely
all good.

Umm, now the game has been set up on windows as well, so that is good I
assume. Would have to set up some of the vimrc stuff here as well, but should
be fairly straightforward for the most part I guess.

Okay, in terms of plan of action, I'm not sure what I should work on next. I
remember the "priority was to get a working overall structure of the program
in place, which essentilly means that we need to set up the main menu as well
as the


Okay, yeah, so I need to start implementing the main menu stuff right? I think
I should start off with that immediately?

14 Jun 2020
Okay, again, really need to spend some time and just start putting the work in
really. (Narrator: And then he spent the next 4 hours on Youtube ¯\_(?)_/¯ )

Alright so main menu. I think lets do that. Actually fps.

So one thing that we currently have is that the ui.c file is what does the text
rendering. There are two things that we can do in order to do the menu rendering
Either we give the simple renderer some functionality to do text rendering as well,
call into ui.c from the renderer. Yeah I think those are the two options that we
have. I think we should start off with using the existing ui.c code. 

Actually, anyway we are going to have to rewrite large,
no, use it as it is right now. Let's see what we can do later.

Yeah, alright, implemented the whole menu functionality. (Narrator: yeah
"WHOLE FUNCTIONALITY")
There's a bit more to be done there, but for the most part, I think the
structure is good.

Alright. I guess we could work on the level select screen next? Since the idea
that I do have is the node based idea, we should prototype some simple version
of that I guess.

15 Jun 2020
Agian, I can feel the laziness creeping in, and honestly, it doesn't feel so
super, I do have to admit. I need to figure out some mechanism that allows me
to circumvent this same thought spiral.

Largely, I think I really need to get used to the idea that this is _all_
about delayed gratification. I think at some level I am just not able to
appreciate that to a large enough extent, and that is the cause of the
constant distractions and all the other rubbish.

Okay, we also have to figure out how to store and load the levels then right?
It might be quite a bit of a hassle to do it all in text files. But I guess we
still should be doing that in any case? At least whike starting off. Later on,
we can probably move on to make some sort of toolset that would allow us to do
that. But that's later right. Right now we only need to implement the simplest
version of that. And I think that everything that we need to have in that
version has already been covered in the level_select_struct.

17 Jun 2020
So yeah, I think that one of the things that I really need to work on is to
get really into the whole develpmnet stuff. So I _know_ that when I really get
into it, I enjoy the process, but everyday, I'd just much rather be dreaming
about getting successful amd all the interviews and podcasts that Id do and
rubbish, but never about actually doing the actual deed. So that's fairly
annoying atleast right now. And even just then, I go out and start watching
some more fucking youtube,,,

Okay, so whats the next step really? I think it must be implementing the level
select screen right? Yeah, that makes sense right now.

19 Jun 2020
Okay, so I need to do some work today. But to be honest, I'm _really_ happy
with the progress over the past few days. Sure, it doesn't really look/seem
like much, but sortwed out all the weird issues, like the flickering and
things. And yeah, I think that's definitely a good thing. So I think the next
thing we should probably be working on is getting sound effects into the game?
I think that may be kinda important.

So okay, I guess some of the things that we need to really get into the game
would have to be the sounds and the animations. The animation system is
something that we would have to really figure out from scratch almost I guess.
Sounds should just be mostly adding some sort of sound controller I guess

APart from that I am just thinking what else really needs to be done. I may be
missing some very basic elements, but at this point in time, I really am not
sure what those would be.
Maybe I could also spend some time on the visual elements of the whole thing.
Specifically, a grayscale "implementation" of all the elements to get a decent
grasp of what is really necessary to be developed, and secondly, a demo of
what we want the main character to look like, with all the shader work and all
of that done as well. I think if we can start getting all of that done, it
would definitely be ideal.

20 Jun 2020
Okay, so what should I be aiming to get done today? I played a demo of the
monster expedition game, and that looked kinda cool. It has a few more
elements that I do, but honestly, not exactly looking to compete I don't
think. So yeah, I think honestly, we are *way* behind on the artwork. I have
all the tools required now also, so no real good excuses anymore I don't think

Okay. Spend some time on the artwork now then.

22 Jun 2020
So I think at some point, I reverted to drawing the sprites from the bottom
left corner. Actually, we should be drawing them from the center so that the
stuff gets easily overlapped whatever aaaaaa,.
Now I think I remember why I would have switched to the bottom left version.
It was because we wanted to draw sprites that were 2 units tall, and in that
case the corners would be different
Okay, so what are the important things that need to be worked on right now?
I'm just trying to get a grasp on that. So we need the better ground tile
selection stuff. Then the actual krita processing scripts. Some animation
rendering stuff? Okay, pick one and get to work. I think the krita script is
the important one. Until we get that, working on the other stuff would require
a bunch of busywork, which I'm not so keen on doing really.

23 Jun 2020
Okay, what should I be working on today? I somehow managed to get the stuff
set up with krita and all yesterday. It's an annoyance, but it works for now I
guess, and maybe at some point in the future we will have to do a _lot_ of
work with it, but atleast for now, I think we can happily move on.

But the real quesion, is, move on to what?
Hmm. There is the ground and slippery rendering that will need some amount of
work. That would be worth working on. Apart from that, the animation stuff
definitely. Otherwise there is the screen shifting. The input handling. The
sounds. Oh man there are honestly so many things that would need to be done
wow.

Okay took care of the input stuff. Really interesting solution if you ask me.
So now on to the ground rendering I think. Actually the slippery ice
rendering. So I think we actually have some data for that? I mean we have a
"material" index that we pass. No reason why we can't improve on that. Or
atleast, use that to figure out which sprite should be drawn. So I did the
calculations yesterday. I figure I will need 22 sprites to represent all of
the possibilities. Maybe it's just 17 then... Î

24 Jun 2020
Okay, I don't really know what to work on next... Maybe the island/ground
stuff? But I just spent a bunch of time on the yesterday, so not too keen on
doing that again today. Apart from that maybe the sounds? Yeah I haven't done
anything with the sounds. Also, I think we need to get away from the idea that
only some of the things will be animated. As long as it's not NONE it should
have an animation entry so that we can fade that stuff in as neccessary?

25 Jun 2020
Man the audio stuff is actually really complex. I'm struggling to get a decent
grasp of how it all works. So lets spend some more time in doing that today.
Always remember that the reason that you're really doing all of this is to
really learn stuff. Sure, audio is complex, but so was gl when we started off,
and look at us now. Cool? Cool. oKAY. sTOP WITH THE YOUTIBE THEN i GIESS?
Aaaah man. I spent a lot of time on it yesterday. And I'm a little scared to
jump back in today man. Damn.

Maybe I should move to something else and then come back to this later.
There's no real point in dreading the thing for the rest of my life. Might as
well move on and see how the other things pan out.

Okay, there are two things that I need to work on, one is the slides that
delete an object end up just disappearing. That might be quite a deep issue.
Because when you think about the way the renderer works right now, if the
thing is not in the world, then we don't know that we have to draw it. I think
it is reaching a point where we need to start drawing things not from the
entities object. Might be a bit of a refactor, but I think it makes sense to
start moving in that direction, especially now that we see all the issues that
it has been throwing up.

The other major problem that still has to be resolve is the ground getting
animated as the ice passes over it. Now that I think about it, I think doing
the previous step will take care of this as well.

Oh man, I've not spent any time on this section of the code in so long, that I
really don't even remember all the things that are happening exactly, and I
don't think my current approach of just randomly fiddling around over there
makes all that much sense. Maybe I should be sitting and doing it "correctly",
but then again who do you think I am?

Okay, so O have the set up the animation data to have the z index as well. But
I don't really know how the depth buffer stuff would work. I think that's the
biggest thing that I don't really know how to do. Also, maybe it's time to
rethink the whole animation_struct stuff. Now that we're going to be moving to
animated sprites, maybe it isn't the best idea to continue using the same
basic interpolation stuff. Okay, but what exactly do we need to do in order to
redesign that stuff?

Okay. So the system that I would like definitely probably includes some kind
of depth buffer testing. So if I want to do passes over the rendering, then
having support for a much larger vertex buffer and a depth buffer sensitive
graphics api would be very useful. My biggest concern right now is the way
that we are writing to the buffer may mean that we might have an annoying task
of including the data for the vertex buffer / edpth.

Okay, I think we really need to introduce some kind of entity index that
stores the positions of the entities as well. The biggest issue really would
be in keeping that in sync with the grid data. But to be completely honest,
we're already kinda struggling with that in some sense. Maybe we can do that
once, and then update all entities based on their grid positions every frame
before we render? I think that could actually work out decently well for us.
Hmm... Interesting;

26 Jun 2020
Oh yeah, bunch of work was completed today. So I have the ice sliding off the
map correctly now. WIll have to implement that for all the other objects as
well, but that should be fairly straightforward. About the ice, I really don't
have any good ideas as to how I want it to look. Maybe make it such that when
the cube is completely over a block that's when it shifts, but the
surroindiung stuff with still look kinda bad there. I wonder what the best
move to make in that situation is really.

Apart from that, ofcourse there is the sounds. Damn that's going to be hard I
fear. So yeah. There's the animations as well. And also the whole level select
screen. I need to put some amount of thought into that as well. I think
because I have a very abstract idea of what I want, and I don't know what's
the best thing...

27 Jun 2020
So what should we be working on today? A little unclear. We can sit and do the
falling animation? Also at some point we will have to rework the sprite
rendering as once we get animated sprites, they will likely be wider than a
single block, and at that point we might want to have a smarter use of the
spritesheet. When I say smarter, I guess what I really mean is more
traditional method. ¯\_(?)_/¯. Haha. I somehow always manage to procrastinate.
For some reason, when I make a batch script to copy to clipboard, it doesn't
properly paste in vim.  <shrug>.
But I think that will come later, once I have some of the stuff prepared. For
now, it doesn't make sense to die over that. Also the falling animation, I
think, for now we can just set scale and try that and see if it works.

Okay, so now that I think about it, we actually have to add a bit of
functionality. Apart from just the interpolation, we also have to have the
ability to queue up the animations. That would be required if we want multiple
animations to play on "demand". And we *definitely* need that. That's how the
mouse will slide and then hit a wall or whatever. I am wondering whether we
need to update what the animation struct would look like. Radically at that.

For some reason I can't use SHIFT+BACKSPACE on windows in vim. So fucking
annoying. Okay now I have shifted to gVim. It might be a little more
comfortable. SOme of the tab changing shortcuts still work, so thats nice. But
for the most part it's just more procrastination if we're being completely
honest.

Okay, now back to the point. We were trying to figure out how we are going to
structure tha animation data so that it supports the things that we want it to
support. Basically, it should allow for queued animations. Which means that
there needs to be some kind of list. And then we have to pop the top of the
list to get the next item, and stuff like that. So the list itself would also
need to contain some stuff. But what?

Aargh. Now I remember why I was procrastinating instead of working. This
decision seems like it is really hard, and I'd much rather do something else
that sit and make this work. But the truth is that once I get into it, I know
that I will actively enjoy working on it. I don't know why I can't actually
get into it. But I must sit here at the lap of the teacher, and be obedient,
and eventually, I will reap my rewards.

So umm, what we really need in these scenarios is basically a . What I'm
really trying to think about is whether the best way to do this is to use a
list of some sort, or whether we can have a more clever way of doing this. Or
no. A list is probably the simplest way to approach the problem.

So I really think that I need to separate out the animations from the
movement. Basically the animation just needs to have a series of frames, where
as the motion is separate entrirely. So I think I can just convert the
animation state to motion state or something like that for now. I also have to
figure out how to not always move the items linearly. Actually, maybe I can do
that right now, and see how that works out.

Yup, that was fairly straightforward for the most part. Now back to the actual
task that we had to do? If you don't mind? And lunch break? lunch break.
Bloody

Yeah, so the ease in out works. How do we do the other stuffs though. Start
off with the easy shit. Rename it to be movement state or some rubbish like
that. Alright. Easy shit done. Now one issue for the animations is that I
don't really have any sprites to work with as such. Okay so now what was the
hard stuff that we had to work on? Maybe start trying to work on audio again?
That honestly makes sense. We should have a lot more time today to actually
put the work in and see if things work out.

Okay wow I got it. I had made a pretty stupid mistake if I'm being honest. I
had simply assumed that the decoder could be reused. Now that I created
multiple decoders, it's all woking fine. Cool. The next step is probably to
figure out how the device is supposed to know that it's done (so that we can
figure out how to actually implement that into the game? Sure makes sense.)

where did he come from where did he go?
where did he come from cotton eye joe?

Okay, so I think the way that miniaudio works just clicked for me right now,
and I am in kind of a funny headspace. There is so much excitement at all the
ideas of how the boombox can be implemented, but also there seems to be a
sense of dread. Okay not dread, but at least resistance. I think it's because
right now, in this moment, it's all in my head, and it's perfect, and it's
exciting. But once I start actually implementing it, then all the
imperfections and annoyances will start to arise. So yeah there is that. But
anyway, I think actually recognising the feeling for what it is will help get
me over the bump.

01 Jul 2020
Okay. I feel like I've not put in much work over the last few days, but I
think that's mostly a lie. I'm pretty sure I did all the audio stuff on
Monday... So just tuesday that I didn't work, but work was crazy, so I think
that's fine. Really tired today too. But I think I want to atleast put in some
time today. Wow, this cursor has quite a wierd blinking pattern. Just
realised.

Okay, the thing is also now crashing because of the miniaudio. It's also not
consistent, so I don't know what that is about. Yeah as expected it was my
mistake. I had not set is_playing as false while initting the tracks.

Okay, there is a task that I've been putting off for a while. After
implementing the entity based rendering, I've not bothered to actually umm
complete the entire task.
- Add the interpolation stuff for all instances of the entities falling off/
  changing state in any way
- Remove / gifure out how to remove the entities once they no longer need to
  be drawn. Can just set to NONE if convenient. But note that they will have
  to be "animatable" in their disappearance.

Okay yeah, that's done. Fairly straightforward. The removal I'm not sure
whether to do that now, or whether to do that after the animation. No I think
we should do now, and redo later. Otherwise, there is a lot of commotion right
now.

Okay, that was fairly straightforward. I really think the next thing to work
on should be animation. So let's go?

Okay, the more complexity we add, the more we have to start figuring out how
to handle other parts of the code. For instance, with the animations dat stuff
that I am loading now, it will begin to impact how things like UNDO etc should
be handled as well. Right now undo is fairly naive, and it essentially loads
the whole world again. Maybe at some point that may not be the best decision.

02 Jul 2020
Yeah, I goofed up a bit today. Started off with YouTube before schedule, and
essentially wasted a lot of time. But yeah. I guess that happens sometimes.
It's almost 10:30 now, and I don't know if I will actually be able to get
anything done today.

03 Jul 2020
So I don't know, I spent a lot of the morning almost planning to quit
immediatlely, and felt that I should be spending a lot more time on actually
working on the game, but then I've now spent a lot of time not doing that. Its
a bit of a bitch, and I really don't understand it.

Anyway I really need to start some time building puzzles again. I was doing a
pretty decent job of it till now, but now I have not really been too
disciplined about all of that anymore. Because I really think the game will
live and die by the strength of the puzzles alone. Everything else is just
polish. It might get people to get into it, but good puzzles is what will get
people to evangelise. And if we want to sell a thousand copies, we diefinitely
need people to be evangelising to the maximum extent possible.

Okay, what is the thing that I should be working on today though really? That
I guess is the question. I don't feel like drawing up more animations right
now. But one thing that does have to be done is to create the animation
queuing system. That would be fairly important. yeah but in absence of that,
what is the thing to actually work on right now? I am not entirely certain.
Now what though aaaah.

Maybe we should start the level select screen tooling and design. Cool lets
go. Okay actually its a bit of a problem. Either we can have it all in the
same file, or we can move it out to another file . I think we should start off
with it in the same file, and at some point move it out if required.

Oh looks like we need to start off with simplifying the mouse data. Have a
single source. It looks like we have it in multiple places right now. Haha I
was supposed to start working on the level select, but I just did the mouse
stuff and now I'm so happy with myself. Ey bugger. Get to work da,.

Okay, so turns out that line rendering can be a bit of a bitch. At this point,
it feels like it might be simpler to create a texture with a line in it and
use that to draw rather than anything else. :monkey_see_no_evil:

But to be fair, at some point, we do have to use the same game rendering code
to render the level select screen i presume. or atleast the same as the main
menu. So actually, I think the main menu and level select can share. Or maybe
we should just make three separate? At any given point, we only need to be
rendering one right? So we can switch I presume. So we can reuse the same
buffer basically. That's what I was getting at. Let's see?

Okay, so the real question I guess is to see what exactly the main menu would
be rendering. And the level select. And see whether that can be combined, or
should be combined with the game. For now, however, maybe we should just be
focusing on the tools to easily edit it? So the big consideration is how
exactly we want to have the tool work. It would be fairly straightforward to
make the tool such that we can just click on a location and that would be the
placement for the active_level. Drag may not be necessary. The important thing
however is the linking. How we do that is probably the main question. And then
the saving of course, but that's honestly quite simple.

Oh man for some reason we had enabled face culling and that was what was
caising all the bloody problems. Now that we have repmoved that nonsense, the
line rendering should work fine. 

Okay, I went and played some of the levels again, and honestly, some of them
are pretty great, I have to admit. So yeah, I guess there's not too much to
worry about there really. But We do have to keep in mind that that is still
wehere a lot of effort ought to be going. If we want to make a good game, the
dev stuff is important sure. But people will probably play a slightly buggy
amazingly designed game rather than a amazingly devved boring game. So yeah

04 Jul 2020
So I was just investigating a bit on the key_callback situation, and it may
not be *exactly* how I'd imagined... Maybe I should read up a bit on that and
see how excactly it all works. Yeah, it looks okay. Should just keep an eye
out for now. To the best of my understanding, it recieves all the inputs, and
then "processes" them together.

Okay, one interesting question that I have to think more about is how the
links in the level select should work. Till now, I had just assumed that the
levels would be linked 1:1 in the sense that if 1 had 2 as down_index, then 2
would have 1 as up_index. While I definitely want to make sure that 1 and 2
are connected to each other both ways, maybe there is the possibility that the
don't have to match connections. Considering that this was kind of the theme
that I was looking for when I started off, I think it suits decently well.
Also on a wider note, I think we really do have to spend more time figuring
out exactly how we should be implementing the theme across the game. Widely
it's about a man's (mouse's) search for meaning. And how that is often a
roundabout path, and the largest impediment to that is often ourselves.

And on that note, I think I've found a great name for the game. _Arth_. It
encompasses the theme pretty well. And it has some nice gotchas as well. Arth
means _meaning_. But it also is one of the pursuits of human life, and in that
context, it means wealth. Which is a super interesting conundrum. I think we
should have a tagline as well. Like _The Biggest Puzzle_. Or something like
that.

I dunno sometimes, I get such HUGE surges of dopamine from really small things
on the project. Like yesterday it was refactoring the mouse functionality, and
it made me abysmally happy. Which is super weird right? Today it was a
combination of finding out that my program has no leaks, and finding a name
for the game. It just sends me on these elaborate flights of fancy, and it
takes a certain amount of effort to come back to the ground and start working
again. So yeah, I dunno. I mean maybe in the long run it is a good thing, that
things like this give me so much joy, but in the current situation, where I
need to be spending more time on actually working on the game so that it can
be completed, I really think it gets to be a bit of a hindrance. Okay, anyway,
we can either continue working on the level select, or we can sit and work on
the animations.

And again the question arises. So what do I work on today. I probably should
spend some time on doing the animations, so that even if the dev work isn't
completed over the weekend, the art stuff would be, and we would be able to do
the dev stuff at any point in the future.

Okay, let's make a list of all the animations that need to be done. Ojay, I
have drawn a few more. I think enough that I can do all the necessary work.
Should be good enough right now.

Okay yeah, it looks like the whole animation stuff is pretty messed up. I will
have to go through the whole `maybe_move_player` code to figure out where
exactly the animation hooks really need to be added. Currently, they're just
kind sprinkled in there, but we need to be a little more thorough. We also
might have to rewrite parts of it. Initially, the intention was that it should
be as elegant as possible and take care of all the cases, which it does, but
once we add the recursion, it seems like maybe there is a smoother way to do
it all.

Okay, so we need to rethink how exactly we're handling all of that with an eye
for queing animations.
So now, I think that what we need to do is not short circuit out of the
function. We need to always reach the end, and then queue, and then depending
on whether there is need for further movement or not, recurse at that point.
Note that we can short circuit in general, just not to recurse.

I mean, we did a bit today. But also, really, I am a little lost on what
exactly should be done in a day.  Like I don't necessarily feel bad, but also
won't say I feel great or anything.

While the animation system could do with a bit of extra work, specifically
better handling the positionof each frame (rather than any kind of linear or
eased interpolation), I think for the most part it is fine. The animation
loader will take some time and effort, but that also requires a certain amount
of effort from the art side, which I'm not super keen on doing right now.
Level selct editor needs some work. As does the entire puzzle design aspect.

Maybe we can add joystick support today? That could be fun. Apart from that I
think the game mode is reaching near to completion. Maybe on that note, we
should try to also figure out the animation frame spacing stuff today itself.
Or atleast get that fully out of the way. One thing that would need is a tool
of some sort that we can use to get the timings down. I don't know whether
that should be in the game engine or separate?

Maybe it should be separate? That might give me a good chance to see all the
things that I have developed till now and figure out which is important. But
also the tool overall whererver it may be seems like it might be a bit hard to
develop and be neatly uasble? Actually now it does sound kinda fun.

Aah it keeps jumping from, wow, could be fun to write to aah, so much annoying
boilerplate. So now that I think about it, we should probably only be doing an
offset from linear. That's the thing that makes the most sense I feel.

06 Jul 2020
There is a balance we need to strike between the movements and the animation
speed. If it's too slow, then it just becomes unbearable. Maybe see how these
other games handle that...

07 Jul 2020
Okay, so now the real question is what interesting phenomenon happens when we
just have two furn. One is definitely that if we line them up, the act as a
wall. Okay, I guess a part of the question is how exactly we want to deal with
holes as a level mechanic. I remember at one point, it felt like a profound
idea, and for the most part it probably is. But we still need to figure out
exactly how and where it would be useful. And I really think we just need to
sit and design a bunch of levels before we get that same level of familiarity
again. Again, I think I need to keep in mind that the unique thing about these
puzzles is the sliding. We need to make sure that we keep that in mind as we
go about designing these puzzles. Doing general sokoban shit is not necesarily
the best move.

Another thing we would need to work on is the recording / testing.

19 Jul 2020
Okay, so we are going to try to work on the art stuff today. Hopefully have it
done by the time the weekend ends. So I am loading the png of the colours.
Would also then need to load in the shadows. But currently they are both
regular pngs. We would instead need them to be sdf'd in some way. SO
basically, the colour png would just be the colours. The secondary png would
consist of the sdfs. There are three channels, so we could probably have three
different values there. Off the bat, it could be shadow, outline and distance
to colour. So I guess we'd need to create the sdfs then. Let's try it out in c
with the stb_image library. Also I guess we'd need an outline then. Let's do
that first. Okay that's done. Now we have to sit and figure out exactly how we
want all the sdfs to work. Just off the top of my head, I'm trying to think
about how the system would work.

So the outline is fairly straightforward. Use the same logic that we had used
on shadertoy. Find the distance to the closest line, and just use that as a
measure. Run a couple of noise filters through it, and we should get a decent
line out of that.

The next one is probably a little harder. So we would probably need 3-4
different overlapping noise filters to get the colour stuff working I presume.
We would still need immediate distance from the edge, because the colour tends
to be a little more saturated at the exact edges. Then maybe we need a couple
of noise textures to handle the saturation and lightness values across the
area as a whole.

Alright, I think that gives me a decent idea of how to start with generating
the sdfs. Let's go.

20 Jul 2020
Okay, so I rewrote the sdf calculator to use the gpu instead. speedup is
fucking insane. the c version took few minutes, this takes 4 seconds. so that
was nice. and it was kinda fun to sit and port the code from c to glsl i
guess. Okay, I reran the old code just to get the timing, but I hadn't
compiled it so it ran for minutes, and then quit, and i got nothing out of it.
maybe at some point i will rerun it again for the stats... but eh. let's see.

Alright, now I think I need to work on returning the project back to it's
original state. This has just been a bit of a detour. And that's okay, but how
do we save this work? I think I'll create a branch with all of this. Then go
back to master and manually revert it. But I don't really know *exactly* how
to do that to be fair.

Oh fuckety fuckety. I hadn't committed before butchering. Ouch. Though to be
fair only renderer was affected in this for the most part. Maybe no branching
action for me =/. Okay, it's back ish. Depth buffer may be fucked up.

Okay, was just a discard issue. Looks fine now. May need to look a little
further at some point as well. But need to commit now.

21 Jul 2020
It's a new day, it's a new way. Again, the self imposed restrictions are going
quite well. But I'm just super restless, and don't know what to do. Oh wait, I
was working on a pretty epic puzzle design last night. Maybe complete that up.

Okay, got a couple of decent levels out today.

22 Jul 2020
So there are two interesting things that happen when you have 2 furns. One is
that putting them back to back allows neither to move. So it acts like a wall.
So there are two things I think I want to explore using that. One is figuring
out a way that both need to be used. The other?
Actually no, I saw before that there's no really interesting thing that cam
come out of that because there is no difference between having two stay in the
same place, and having one bounce back. Unlesswe need to push off the cube
again. Yes. In that case, we would have to place them back to back.

Haha, it feels like I'm just now discovering that in fact, the final goal is
actually probably the biggest obstacle. Always manages to get in the way. And
thematically, that just feels so on point.

23 Jul 2020
Okay, so I think we need to start moving towards the final stage of artwork
atleast in level. I have a good idea for how the render the slippery. Also
will need to figure out the pipeline to set up all of the artwork, so that has
to be done as well.
But yeah, basically need to start moving towards a more final version of all
of that. So basically what we need is a couple of passes through _after_ all
the elements have been drawn. Or atleast during that process. Add things like
flowers or whatever. And in this case, ice on the side.

24 Jul 2020
Phew. Finally the work week is complete. And I should be able to work on
things. TO be completely honest, I'm not entirely certain what the best thing
to work on next would be. I think the art is sowewhere in a limbo where we
have the "tech", but the art is not really ready. Maybe that is something we
can take on over the weekend and see where that gets us.
The level select is woefully behind as well, and there seems to be zero idea
of where we want that to go. Maybe just some thematic explorations would be
super useful as well. Also just some general goal setting. Don't want to sit
and do now, but at some point over the weekend. How to release a build for
playtesting. And so on.
On the art side, I guess there is still some work that needs to be done,
specifically with the idea of leaving the paper colour around the edges of
separate sprites. (maybe in sprite as well?)

In any case, all of that has still left me with no real ideas as to where we
should be pointing our attention to next.  Haha yeah I guess. Life I guess.

25 Jul 2020
And I still don't believe I have an idea of what I wan't to be doing next.
Maybe try to flesh out the level select screen? Okay, the real question there
is what should be done? Actually the main menu screen might be a bit easier to
tackle in that regard.
So let's do that work and animation.

26 Jul 2020
Okay, just worked on a level, and oh man it works so well. I think the best
way to make levels is to just really throw in a bunch of things and then
actually try to solve it.

Okay, moving on now, made a couple of banger levels today. Quite happy with
them. But what next?

So when it comes to the concept of the level select screen, I really like the
idea that there are different ways to get to the same level, and it's not all
laid out on some square grid. I think that idea gels well with the theme. But
there are some usability constraints there that I do not want to override.
Like you can always go back to the level you just came from. so left and right
are always the inverse of each other. same for up and down. beyond that, i
think there are lots of things that can be done.

However, specifically which of those things I want to do, I'm currently
uncertain. and even in general, what those _lots of things_ are, I don't
really know. All I know is that there are not many constraints, so im just
assuming there are lots of options available to explore i guess.

So I like the idea of spiralling in towards the final level. that allows us to
have optional levels on outshoots, which could be fairly self explanatory.

Okay, found a better idea instead it's all a loop, and you end up where you
started, but with a better understanding. something like that. also the main
loop is outermost, with all levels having a detour around to take a shorted
path. Once all the levels are completed, that's game completion. everything
else is bonus content. and once all the levels are completed, that 100%.

so we would need some indicator to show that 100 is not complete. or something
along those lines. but if there are detours, then it should be clear that
there is some meaning in coming back and retrying or something like that, and
at that point, all the inside levels will open up? or maybe we shouldn't
really bother hiding them all that much. or maybe on the last stage, we then
open up all the inside levels if you go and see. something like that maybe.
yeah, that makes sense.

27 Jul 2020
Made a level today. nothing super special, but decent enough i guess. Need to
figure out what needs to be done on dev side along with, and make sure that
we're doing that as well. for the most part i feel that the levels will just
take time. we need to be making some kind of consistent progress on the rest
of the dev stuff as well. so maybe start off with some kind of deadline for
starting playtesting. that may be super useful. say 01Sep2020? That should be
a decent date I presume.

31 Jul 2020
Again, I'm not fully certain what to be working on. Maybe make the level
select screen work? Including some of the rendering stuff. Sure yeah, that
makes sense I guess. Also I would have to somehow get the level unlocking
stuff to work as well. Maybe start off with that?

Yeah, I really think that we need to be slightly more organised about all of
this if we really want to be seriously working on the level select screen.
Just sit and lay out the levels "randomly" for now. Later, we can always come
back and figure out the "correct" level order for pacing and things.

So yeah, with regards to the final rendering of the level select, I think as
you complete levels, obviously the lines should show. Also how do we then use
that to create the "story". So yeah, then we just need to sit and consider all
the things that are available.

Also, maybe we are in a position to start seriously considering what we want
to have in the first release of the game (playtest release). Yeah, for the
most part, I think atleast the levels that we have should be playtested, for
some level of feedback.

Also, this would be a good excuse to really do the work required for release.
get it to a point where all the remaining stuff is just polish. to be fair,
that was the goal for june? or maybe july, but that's okay, i do think that we
have gotten decent amount of work done. now we need to start focussing on
actually completing.

Also the name. aah. the motherfucking name.

01 Aug 2020
Alright. It's a new month. And it's the weekend. So hopefully, I'd like to get
a large part of the level select screen done this weekend. All the code if
possible, and some of the final "artwork"

So legit, the first thing that we would need to do would have to be to sit and
arrange all the levels in a meaningful way. I guess we would also need to
create the basics of the savegame system?
Okay, but what to we need to do the layoud stuff?

Okay, so there seem to be two main aspects that we would need to take care of
really. but fuck all that, lets just get started with something man. I guess
the first question that we need to ask is whether we want to use the same
shader. I think a large part of the shader code would be the same, so that
should be okay. So lets just get started with that then I guess... So heres
another thing. we have to have the positions of the levels all saved in shader
(or passed to shader). okay. so? what's your point sam?

Lets just get started man. put in a blank sheet? No should have the fill. I
don't really think I can just wing this like some of the other stuff...
Alright. So the main difficulty right now is how to do the lines between the
levels. It can be procedural or handdrawn, that's not the real concern. The
main thing is how do we create a texture where they can be turned on and off?

Maybe put just that part away for now? Then another thing is the level
placement. how do we get the coordinates of the levels? Let's just start with
that? Since we theoretically already have some tools... So start off with
rendering the blank background. We would also have to retool the shaders to
use the center coords. something like that. Also, maybe it might be useful to
have a separate set of shaders. Or maybe not.

02 Aug 2020
Okay, so decent progress yesterday I guess. TOday we need to figure out how to
add the actual level indicators. How to load that into the shader and stuff.
and then how to only show the things that are actually available I guess. And
for that matter, mayeb even separate the shaders. Should be separate enough.
Also, I was thinking, maybe I'm becoming overreliant on the idea of
accomplishgin everything in a single draw call. The background can easily just
be a separate set of shaders, and then have another set of shaders for the
actual levels and lines and things.

Okay, so lets get started on the second round of shader stuff then.

08 Aug 2020
So today, I would like to finish working on the line between levels rendering
stuff. I have decided that it makes sense to do that with sdfs. So yeah, to
begine, we can just draw straight lines between the two points. Maybe in the
future we can update that to use some kind of curves...
